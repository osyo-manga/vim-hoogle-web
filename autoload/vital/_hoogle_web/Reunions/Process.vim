" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
if v:version > 703 || v:version == 703 && has('patch1170')
  function! vital#_hoogle_web#Reunions#Process#import() abort
    return map({'_vital_depends': '', 'as_autokill_task': '', 'make': '', 'make_interactive': '', 'as_task': '', '_vital_loaded': ''},  'function("s:" . v:key)')
  endfunction
else
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  execute join(['function! vital#_hoogle_web#Reunions#Process#import() abort', printf("return map({'_vital_depends': '', 'as_autokill_task': '', 'make': '', 'make_interactive': '', 'as_task': '', '_vital_loaded': ''}, \"function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")
  delfunction s:_SID
endif
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


function! s:_vital_loaded(V)
	let s:V = a:V
	let s:Base = s:V.import("Reunions.Process.Base")
	let s:Interactive = s:V.import("Reunions.Process.Interactive")
endfunction


function! s:_vital_depends()
	return [
\		"Reunions.Process.Base",
\		"Reunions.Process.Interactive",
\	]
endfunction


function! s:as_task(process)
" 	let process = copy(a:process)
	let process = a:process
	if has_key(process, "apply")
		return process
	endif
	function! process.apply(parent, ...)
		call self.update()
	endfunction
	return process
endfunction


function! s:as_autokill_task(process)
	let process = a:process
	if has_key(process, "apply")
		return process
	endif
	function! process.apply(parent, ...)
		if self.status() == "none"
			return
		endif
		call self.update()
		if self.is_killed()
			call a:parent.kill(self)
		endif
	endfunction
	return process
endfunction


function! s:make(...)
	return call(s:Base.make, a:000, s:Base)
endfunction


function! s:make_interactive(...)
	return call(s:Interactive.make, a:000, s:Interactive)
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
